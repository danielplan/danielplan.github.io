import Head from "next/head";
import styles from "@styles/pages/Portfolio.module.scss";
import { PrismaClient, Reference } from "@prisma/client";
import ReferenceDetail from "@components/modules/ReferenceDetail";
import Gallery from "@components/modules/Gallery";
import BigText from "@components/modules/BigText";
import GradientText from "@components/atoms/GradientText";

interface Props {
  reference: Reference;
}

const Reference = ({ reference }: Props) => {
  return (
    <>
      <Head>
        <title>{reference.name} - daniel plan</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className={styles.main}>
        <ReferenceDetail reference={reference} />
        <BigText>
          {reference.lead
            .split("_")
            .map((item, i) =>
              i % 2 === 0 ? (
                <span key={i}>{item}</span>
              ) : (
                <GradientText key={i} text={item} />
              )
            )}
        </BigText>
        {reference.images && (
          <Gallery
            images={reference.images.split(",")}
            video={reference.video}
          />
        )}
      </main>
    </>
  );
};

type Params = {
  params: {
    slug: String;
  };
};

export async function getStaticProps({ params }: Params) {
  const prisma = new PrismaClient();
  const reference = await prisma.reference.findFirst({
    include: { tags: { include: { tag: true } } },
    where: {
      slug: {
        equals: params.slug.toString(),
      },
    },
  });

  return {
    props: { reference },
  };
}

export async function getStaticPaths() {
  const prisma = new PrismaClient();
  const references = await prisma.reference.findMany({});
  return {
    paths: references.map((reference) => {
      return {
        params: {
          slug: reference.slug,
        },
      };
    }),
    fallback: false,
  };
}

export default Reference;
