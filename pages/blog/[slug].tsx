import Head from "next/head";
import styles from "@styles/pages/Blog.module.scss";
import { PrismaClient } from "@prisma/client";
import Image from "next/image";
import { TaggedPost } from ".";
import CalendarIcon from "/public/img/icons/calendar.svg";
import ClockIcon from "/public/img/icons/clock.svg";
import Tags from "@components/modules/Tags";
import { BASE_URL } from "@pages/_app";

interface Props {
  post: TaggedPost;
}

const Post = ({ post }: Props) => {
  const date = new Date(post.createDate);
  const dateString = date.toLocaleString("default", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  });
  return (
    <>
      <Head>
        <title>{post.name} - daniel plan</title>
        <meta name="description" content="Generated by create next app" />
        <script type="application/ld+json">
          {`{
              "@context": "https://schema.org",
              "@type": "Article",
              "name": "${post.name}",
              "author": {
                "@type": "Person",
                "name": "Daniel Plan"
              },
              "datePublished": "${dateString}",
              "dateModified": "${dateString}",
              "image": {
                "@type": "ImageObject",
                "url": "${BASE_URL}/img/posts${post.previewImage}"
              },
              "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": "${BASE_URL}/blog/${post.slug}"
              },
              "publisher": {
                "@type": "Organization",
                "name": "Daniel Plan",
                "logo": {
                  "@type": "ImageObject",
                  "url": "${BASE_URL}/img/logo.svg"
                }
              },
              "description": "${post.lead}"
            }`}
        </script>
      </Head>
      <article itemScope>
        <div className="container header-padding">
          <header className={styles.hero}>
            <Tags blogTags={post.tags} />
            <h1>{post.name}</h1>
            <div className={styles.information}>
              <div className={styles.tag}>
                <div className={styles.icon}>
                  <Image
                    src={CalendarIcon}
                    width={16}
                    height={16}
                    alt="Calendar Icon"
                  />
                </div>
                {dateString}
              </div>
              <div className={styles.tag}>
                <div className={styles.icon}>
                  <Image
                    src={ClockIcon}
                    width={16}
                    height={16}
                    alt="Clock Icon"
                  />
                </div>
                {post.readTime} min to read
              </div>
            </div>
          </header>
        </div>
        <div className={styles.image}>
          <Image
            src={post.previewImage}
            alt=""
            objectFit="cover"
            layout="fill"
          />
        </div>
        <main className={styles.main}>
          <div className={styles.container}>
            <p className={styles.lead}>{post.lead}</p>
            <div
              className={styles.content}
              dangerouslySetInnerHTML={{ __html: post.body }}
            ></div>
          </div>
        </main>
      </article>
    </>
  );
};

type Params = {
  params: {
    slug: String;
  };
};

export async function getStaticProps({ params }: Params) {
  const prisma = new PrismaClient();
  const post = await prisma.post.findFirst({
    where: {
      slug: {
        equals: params.slug.toString(),
      },
    },
    include: { tags: { include: { tag: true } } },
  });

  prisma.$disconnect();

  return {
    props: { post },
  };
}

export async function getStaticPaths() {
  const prisma = new PrismaClient();
  const posts = await prisma.post.findMany({});
  prisma.$disconnect();
  return {
    paths: posts.map((post) => {
      return {
        params: {
          slug: post.slug,
        },
      };
    }),
    fallback: false,
  };
}

export default Post;
